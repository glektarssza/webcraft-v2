# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Build
on:
  push:
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      build-configuration:
        type: choice
        required: false
        options:
          - development
          - production
        default: production
        description: |
          The type of build to create.

          Valid options are:
           * `development`: Create a development/debugging build.
           * `production`: Create a production-ready build.
  workflow_call:
    inputs:
      ref:
        type: string
        required: true
        description: |
          The Git reference to build against.
      build-configuration:
        type: string
        required: false
        default: production
        description: |
          The type of build to create.

          Valid options are:
           * `development`: Create a development/debugging build.
           * `production`: Create a production-ready build.
    secrets:
      github-token:
        description: |
          The token to use to make authenticated requests to the GitHub API.
        required: false
jobs:
  build:
    name: build-${{matrix.build-configuration}}
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{github.token}}
    permissions:
      # -- Required to clone repository
      contents: read
      # -- Required to create/update checks
      checks: write
    strategy:
      fail-fast: true
      matrix:
        build-configuration:
          - development
          - production
        exclude:
          - build-configuration: ${{inputs.build-configuration == 'development' && 'production' || ''}}
          - build-configuration: ${{inputs.build-configuration == 'production' && 'development' || ''}}
    outputs:
      artifact-id: ${{steps.upload-artifacts.outputs.artifact-id}}
      artifact-name: dist-${{matrix.build-configuration}}
      artifact-url: ${{steps.upload-artifacts.outputs.artifact-url}}
    steps:
      - id: checkout-repository
        name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: ${{inputs.ref || github.ref}}
          fetch-tags: true
          lfs: true
          submodules: true
          show-progress: true
          token: ${{secrets.github-token || secrets.GITHUB_TOKEN}}
      - id: setup-pnpm
        name: Setup pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          package_json_file: ./package.json
          run_install: false
          standalone: false
      - id: setup-nodejs
        name: Setup NodeJS
        uses: actions/setup-node@v5
        with:
          node-version-file: .nvmrc
          cache: pnpm
          cache-dependency-path: ./pnpm-lock.yaml
          token: ${{secrets.github-token || secrets.GITHUB_TOKEN}}
      - id: install-dependencies
        name: Install dependencies
        run: pnpm -r install
      - id: build-scripts
        name: Build scripts
        run: pnpm -r --filter @webcraft/github-actions-scripts run build
      - id: extract-job-ids
        name: Get job ID
        uses: actions/github-script@v8
        with:
          github-token: ${{secrets.github-token || secrets.GITHUB_TOKEN}}
          script: |
            const script = require("./.github/scripts/dist/prod/get-job-id.js");
            await script({
              github, context, core, glob, io, exec
            }, {
              job_name: ${{github.job}}
            });
      - id: fetch-check-run-status
        name: Get check run status
        shell: bash
        run: |
          ./.github/scripts/checkForCheckRun.sh \
            --repo "${{github.repository}}" \
            --head-ref "${{inputs.ref || github.ref}}" \
            --run-id "${{github.run_id}}" \
            --external-id "$(echo "${{steps.extract-job-ids.outputs.job-ids}}" | jq '.[0]')";
      - id: start-check-run
        name: Start check run
        if: steps.fetch-check-run-status.outputs.has-existing-check-run != 'true'
        run: |
          ./.github/scripts/createCheckRun.sh \
            --repository "${{github.repository}}" \
            --head-ref "${{inputs.ref || github.ref}}" \
            --run-id "${{github.run_id}}" \
            --job-id "$(echo "${{steps.extract-job-ids.outputs.job-ids}}" | jq '.[0]')" \
            --external-id "$(echo "${{steps.extract-job-ids.outputs.job-ids}}" | jq '.[0]')" \
            --check-name "${{github.job}}:${{matrix.build-configuration}}" \
            --check-title "GitHub Actions CI - ${{github.job}}:${{matrix.build-configuration}}" \
            --check-summary "The job `${{github.job}}:${{matrix.build-configuration}}` has started at `$(date --utc --iso-8601=seconds)`." \
            --check-text "The job `${{github.job}}:${{matrix.build-configuration}}` (job ID `$(echo "${{steps.extract-job-ids.outputs.job-ids}}" | jq '.[0]')`) has started at `$(date --utc --iso-8601=seconds)`.\n\nWe are waiting for it to complete.";
      - id: build
        name: Build
        run: pnpm --filter=webcraft run build:${{matrix.build-configuration}}
      - id: upload-artifacts
        name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-app-${{matrix.build-configuration}}
          path: ./app/dist/
          if-no-files-found: error
      - id: refetch-check-run-status
        name: Refetch check run status
        if: always()
        shell: bash
        run: |
          ./.github/scripts/checkForCheckRun.sh \
            --repo "${{github.repository}}" \
            --head-ref "${{inputs.ref || github.ref}}" \
            --run-id "${{github.run_id}}" \
            --external-id "$(echo "${{steps.extract-job-ids.outputs.job-ids}}" | jq '.[0]')";
      - id: finish-check-run
        name: Finish check run
        if: always()
        env:
          CHECKED_OUT_OKAY: ${{steps.checkout-repository.outcome}}
        run: |
          if [[ "${CHECKED_OUT_OKAY}" != "success" ]]; then
            echo "::error::Cannot update check run status (repository checkout has failed)!";
            exit 1;
          fi
          ./.github/scripts/updateCheckRun.sh \
            --repo "${{github.repository}}" \
            --head-ref "${{inputs.ref || github.ref}}" \
            --check-run-id "$(echo "${{steps.refetch-check-run-status.outputs.existing-check-run-ids}}" | jq '.[0]')" \
            --run-id "${{github.run_id}}" \
            --job-id "$(echo "${{steps.extract-job-ids.outputs.job-ids}}" | jq '.[0]')" \
            --external-id "$(echo "${{steps.extract-job-ids.outputs.job-ids}}" | jq '.[0]')" \
            --check-name "${{github.job}}:${{matrix.build-configuration}}" \
            --check-title "GitHub Actions CI - ${{github.job}}:${{matrix.build-configuration}}" \
            --check-summary "The job `${{github.job}}:${{matrix.build-configuration}}` has finished with a status of `${{job.status}}`." \
            --check-text "The job `${{github.job}}:${{matrix.build-configuration}}` (job ID `$(echo "${{steps.extract-job-ids.outputs.job-ids}}" | jq '.[0]')`) has finished at `$(date --utc --iso-8601=seconds)`\\n\\nIt's conclusion was `${{job.status}}`." \
            --check-conclusion "${{job.status}}";
